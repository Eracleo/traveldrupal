<?php
/**
 * @file
 * Install, update and uninstall functions for the standard installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function traveldrupal_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Create a default role for site administrators, with all available permissions assigned.
  $editor_role = new stdClass();
  $editor_role->name = 'aditor';
  $editor_role->weight = 3;
  user_role_save($editor_role);

  // Cache
  variable_set('cache', TRUE);
  variable_set('block_cache', TRUE);
  variable_set('cache_lifetime', '86400');
  variable_set('page_cache_maximum_age', '86400');
  variable_set('preprocess_js', TRUE);
  // Logging and errors
  variable_set('dblog_row_limit', '100');
  variable_set('error_level', '1');
  // Available updates
  variable_set('update_check_frequency', '7');
  variable_set('update_notification_threshold', 'security');
  variable_set('update_notify_emails', 'drupal7@llika.com');
  // Errors
  variable_set('error_level', '0');
  variable_set('dblog_row_limit', '100');
  // File
  variable_set('file_public_path', "files");
  variable_set('image_jpeg_quality', "100");
  // Pathauto
  variable_set('pathauto_node_pattern', '[node:title].html');
  variable_set('pathauto_transliterate', TRUE);

  traveldrupal_content_type();
}
function traveldrupal_content_type()
{
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'tour',
      'name' => st('Tour'),
      'base' => 'node_content',
      'description' => st('Use <em>tour</em> for time-sensitive content tour.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'destination',
      'name' => st('Destination'),
      'base' => 'node_content',
      'description' => st('Use <em>destination</em> for time-sensitive content destination.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'experience',
      'name' => st('Experience'),
      'base' => 'node_content',
      'description' => st('Use <em>experience</em> for time-sensitive content experiencia.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'slider',
      'name' => st('Slider'),
      'base' => 'node_content',
      'description' => st('Use <em>slider</em> for time-sensitive content slider front.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'testimony',
      'name' => st('Testimony'),
      'base' => 'node_content',
      'description' => st('Use <em>testimony</em> for time-sensitive content testimonio.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    )
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }
  /*
  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'tour',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'blog',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        )
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'testimonio',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        )
      ),
    )
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
  */
  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);
  variable_set('node_submitted_tour', FALSE);
  variable_set('node_submitted_blog', FALSE);
  variable_set('node_submitted_destination', FALSE);
  variable_set('node_submitted_experience', FALSE);
  variable_set('node_submitted_testimony', FALSE);
  variable_set('node_submitted_slider', FALSE);

  variable_set('node_options_page', array('status'));
  variable_set('node_options_tour', array('status'));
  variable_set('node_options_blog', array('status'));
  variable_set('node_options_destination', array('status'));
  variable_set('node_options_experience', array('status'));
  variable_set('node_options_testimony', array('status'));
  variable_set('node_options_slider', array('status'));
  // Creating fields
  /*
  include 'taxonomies.php';
  include 'fields/tour.php';
  include 'fields/destiny.php';
  include 'fields/experience.php';
  include 'fields/slider.php';
  include 'fields/testimony.php';
  */
}
function fields()
{
  // Campo imagen
  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);
}
